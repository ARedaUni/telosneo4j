import {
  CanvasComponent,
  Exception,
  GraphComponent,
  GraphOverviewComponent,
  ICommand,
  Workarounds,
  yfiles
} from "./chunk-CCEMUVPW.js";
import "./chunk-76J2PTFD.js";

// node_modules/demo-resources/demo-ui/BrowserDetection.js
var iosVersion = null;
var safariVersion = null;
var supportsModulesInWorker = null;
var supportsWebGL = null;
var supportsWebGL2 = null;
var androidVersion = null;
var chromeVersion = null;
var BrowserDetection = {
  /**
   * Returns the iOS version, or 0 if it is another OS.
   *
   * As the time of writing, iOS 16 was the current version. Newer versions might use a different ua.
   *
   * NOTE: Since Safari for iPadOS 13, the user agent changed such that iOS and Mac OS X cannot be
   * distinguished anymore. The check still works on other browsers on iPadOS, e.g. Chrome.
   * Therefore, there is a separate check for iPad Safari 13+.
   */
  get iOSVersion() {
    if (iosVersion == null) {
      iosVersion = detectIosVersion();
    }
    return iosVersion;
  },
  /**
   *  The version number of Safari, or 0 if the current browser isn't Safari.
   */
  get safariVersion() {
    if (safariVersion == null) {
      safariVersion = detectSafariVersion();
    }
    return safariVersion;
  },
  /**
   * Specifies whether the browser supports modules for Web Workers.
   */
  get modulesSupportedInWorker() {
    if (supportsModulesInWorker == null) {
      supportsModulesInWorker = detectModulesSupportedInWorker();
    }
    return supportsModulesInWorker;
  },
  /**
   * Specifies whether the browser supports WebGL 1 rendering.
   */
  get webGL() {
    if (supportsWebGL == null) {
      supportsWebGL = hasDrawingContext("webgl") || hasDrawingContext("experimental-webgl");
    }
    return supportsWebGL;
  },
  /**
   * Specifies whether the browser supports WebGL 2 rendering.
   */
  get webGL2() {
    if (supportsWebGL2 == null) {
      supportsWebGL2 = hasDrawingContext("webgl2");
    }
    return supportsWebGL2;
  },
  /**
   * The version of Android or 0 if it is another OS.
   */
  get androidVersion() {
    if (androidVersion == null) {
      androidVersion = detectAndroidVersion();
    }
    return androidVersion;
  },
  /**
   * The version of Chrome or 0 if it is another browser.
   */
  get chromeVersion() {
    if (chromeVersion == null) {
      chromeVersion = detectChromeVersion();
    }
    return chromeVersion;
  }
};
function detectIosVersion() {
  var _a;
  if (typeof window === "undefined" || ((_a = window.navigator) == null ? void 0 : _a.userAgent) == null) {
    return 0;
  }
  const ua = window.navigator.userAgent;
  if (/iPad|iPhone|iPod/.test(ua)) {
    const matches = / OS (\d\d)_/.exec(ua);
    if (matches != null && matches.length > 1) {
      return parseInt(matches[1]);
    }
    return 10;
  }
  if (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) {
    const matches = /Version\/(\d\d)/.exec(ua);
    if (matches != null && matches.length > 1) {
      return parseInt(matches[1]);
    }
    return 13;
  }
  return 0;
}
function detectSafariVersion() {
  var _a;
  if (typeof window === "undefined" || ((_a = window.navigator) == null ? void 0 : _a.userAgent) == null) {
    return 0;
  }
  const ua = window.navigator.userAgent;
  const isSafari = ua.indexOf("Safari") !== -1 && ua.indexOf("Chrome") === -1;
  if (isSafari) {
    const safariVersionMatch = ua.match(new RegExp("Version\\/(\\d*\\.\\d*)", ""));
    if (safariVersionMatch && safariVersionMatch.length > 1) {
      return parseInt(safariVersionMatch[1]);
    }
  }
  return 0;
}
function detectAndroidVersion() {
  var _a;
  if (typeof window === "undefined" || ((_a = window.navigator) == null ? void 0 : _a.userAgent) == null) {
    return 0;
  }
  const ua = window.navigator.userAgent;
  if (/Android/.test(ua)) {
    const matches = / Android (\d\d)_/.exec(ua);
    if (matches != null && matches.length > 1) {
      return parseInt(matches[1]);
    }
    return 10;
  }
  return 0;
}
function detectChromeVersion() {
  var _a;
  if (typeof window === "undefined" || ((_a = window.navigator) == null ? void 0 : _a.userAgent) == null) {
    return 0;
  }
  const ua = window.navigator.userAgent;
  const isChrome = ua.indexOf("Chrome") !== -1 && ua.indexOf("Edg") === -1;
  if (isChrome) {
    const matches = / Chrome\/(\d*)/.exec(ua);
    if (matches != null && matches.length > 1) {
      return parseInt(matches[1]);
    }
    return 100;
  }
  return 0;
}
function hasDrawingContext(name) {
  return typeof window !== "undefined" && window.document.createElement("canvas").getContext(name) != null;
}
function detectModulesSupportedInWorker() {
  if (typeof window === "undefined" || window.Worker == null) {
    return false;
  }
  let modulesSupported = false;
  try {
    new Worker("data:", {
      get type() {
        modulesSupported = true;
        return "module";
      }
    }).terminate();
  } catch (_) {
    modulesSupported = false;
  }
  return modulesSupported;
}

// node_modules/demo-resources/demo-error.js
var errorDialogOpen = false;
function registerErrorDialog() {
  try {
    window.Error.stackTraceLimit = 35;
  } catch (ignored) {
  }
  window.addEventListener("error", (e) => {
    e.preventDefault();
    if (inErrorState()) {
      return;
    }
    if (BrowserDetection.safariVersion > 0 && e.error instanceof Error) {
      console.error(unwindStack(e.error));
    }
    openErrorOverlay(e.error ?? e.message ?? "Unhandled error");
  });
  window.addEventListener("unhandledrejection", (e) => {
    e.preventDefault();
    if (inErrorState()) {
      return;
    }
    if (BrowserDetection.safariVersion > 0 && e.reason instanceof Error) {
      console.error(getInnermostError(e.reason));
    }
    openErrorOverlay(e.reason ?? "Unhandled promise rejection");
  });
  const anyWindow = window;
  Exception.handler = (error) => openErrorOverlay(error);
  if (anyWindow.require != null) {
    anyWindow.onError = (error) => openErrorOverlay(error);
  }
}
function getInnermostError(error) {
  let inner = error;
  while (inner.cause instanceof Error) {
    inner = inner.cause;
  }
  return inner;
}
function getInnermostMessage(error) {
  const inner = getInnermostError(error);
  return `${inner.name}: ${inner.message}`;
}
function unwindStack(error) {
  const stack = error.stack;
  return !stack || stack.length === 0 ? "<no stack available>" : error.cause ? `${stack}
Caused by:
${unwindStack(error.cause)}` : stack;
}
async function openErrorOverlay(errorOrMessage) {
  const ErrorOverlay = customElements.get("vite-error-overlay");
  if (ErrorOverlay && typeof window.reportError === "function") {
    window.reportError(
      typeof errorOrMessage === "string" ? new Error(errorOrMessage) : errorOrMessage
    );
  } else {
    openErrorDialog(errorOrMessage);
  }
  setErrorState(errorOrMessage);
}
function openErrorDialog(errorOrMessage) {
  if (errorDialogOpen) {
    return true;
  }
  errorDialogOpen = true;
  if (errorOrMessage instanceof Exception && errorOrMessage.message.includes("XML Parsing Error")) {
    window.alert(
      "File parsing failed. Maybe the provided file format was not expected or the file's integrity is corrupt." + (errorOrMessage.message ?? "")
    );
    return true;
  }
  const dialog = errorOrMessage instanceof Error && errorOrMessage.name === "TypeInfoError" ? createSimpleErrorDialog(errorOrMessage) : createErrorDialog(errorOrMessage);
  document.body.appendChild(dialog);
  return true;
}
function createSimpleErrorDialog(errorOrMessage) {
  const { dialogAnchor, dialogPanel, contentPanel } = createPlainDialog("Something Went Wrong");
  const parent = document.body;
  dialogPanel.classList.add("demo-dialog--error");
  dialogAnchor.classList.add("demo-dialog-anchor--error");
  addErrorMessage(contentPanel, errorOrMessage);
  const closeButton = document.createElement("button");
  closeButton.addEventListener(
    "click",
    () => {
      parent.removeChild(dialogAnchor);
      errorDialogOpen = false;
    },
    false
  );
  closeButton.textContent = "Close";
  contentPanel.appendChild(closeButton);
  return dialogAnchor;
}
function createErrorDialog(errorOrMessage) {
  var _a;
  const actionUrl = "https://www.yworks.com/actions/errorReportHtmlDemos";
  const { dialogAnchor, dialogPanel, contentPanel } = createPlainDialog("Something Went Wrong");
  const parent = document.body;
  dialogPanel.classList.add("demo-dialog--error");
  dialogAnchor.classList.add("demo-dialog-anchor--error");
  addErrorMessage(contentPanel, errorOrMessage);
  const messageElement = document.createElement("div");
  messageElement.innerHTML = `
<p><strong>Report to yWorks</strong></p>
<p style="border-top: 0">If you think the cause is a problem in the yFiles for HTML library, you can use this dialog to send a bug report to yWorks.</p>
<p>We may not respond to other reports. If there is a problem in your implementation or if you have a question regarding the usage of yFiles, please contact yWorks support via the <a href="https://my.yworks.com" target="_blank">yWorks Customer Center</a>.</p>`;
  contentPanel.appendChild(messageElement);
  const form = document.createElement("form");
  form.classList.add("demo-dialog__form");
  form.setAttribute("method", "POST");
  form.setAttribute("target", "_blank");
  form.setAttribute("action", actionUrl);
  contentPanel.appendChild(form);
  addHiddenField(form, "exact_product", yfiles.productname);
  if (yfiles.license && yfiles.license.key) {
    addHiddenField(form, "license_key", yfiles.license.key.substring(0, 16));
    addHiddenField(form, "license_expiry", yfiles.license.expires);
  } else {
    addHiddenField(form, "license_key", "No License");
    addHiddenField(form, "license_expiry", "No License");
  }
  addHiddenField(form, "version", yfiles.version);
  if (typeof errorOrMessage === "string") {
    addFormRow(form, "error_message", "Error Message", "text", errorOrMessage);
  } else {
    const error = errorOrMessage;
    tryAddHiddenField(form, "error_message", getInnermostMessage(error));
    tryAddHiddenField(form, "stack", encode(unwindStack(error)));
    tryAddHiddenField(form, "error_line", error.lineNumber ?? error.line ?? "");
    tryAddHiddenField(form, "error_column", error.columnNumber ?? error.column ?? "");
    tryAddHiddenField(form, "error_source", error.filename ?? error.sourceURL ?? "");
  }
  const inputEmail = addFormRow(
    form,
    "email",
    "Email <span class='optional'>optional, just in case we need to contact you</span>",
    "text",
    "",
    true
  );
  addHiddenField(form, "system", `userAgent: ${window.navigator.userAgent}`);
  addHiddenField(form, "url", (_a = window.top) == null ? void 0 : _a.location.href);
  const inputComment = addFormRow(form, "comment", "Additional comments", "textarea", "", true);
  const submitButton = document.createElement("button");
  submitButton.setAttribute("type", "submit");
  submitButton.addEventListener(
    "click",
    () => {
      setTimeout(() => {
        parent.removeChild(dialogAnchor);
        errorDialogOpen = false;
      }, 10);
    },
    false
  );
  submitButton.textContent = "Submit";
  form.appendChild(submitButton);
  const cancelButton = document.createElement("button");
  cancelButton.setAttribute("type", "reset");
  cancelButton.addEventListener(
    "click",
    () => {
      parent.removeChild(dialogAnchor);
      errorDialogOpen = false;
    },
    false
  );
  cancelButton.textContent = "Cancel";
  form.appendChild(cancelButton);
  submitButton.setAttribute("type", "button");
  inputEmail.addEventListener(
    "change",
    () => {
      submitButton.setAttribute("type", "submit");
    },
    false
  );
  inputComment.addEventListener(
    "change",
    () => {
      submitButton.setAttribute("type", "submit");
    },
    false
  );
  return dialogAnchor;
}
function createPlainDialog(titleText) {
  const dialogAnchor = document.createElement("div");
  dialogAnchor.classList.add("demo-dialog-anchor");
  const dialogPanel = document.createElement("div");
  dialogPanel.classList.add("demo-dialog");
  const title = document.createElement("h2");
  title.classList.add("demo-dialog__title");
  title.innerHTML = titleText;
  const contentPanel = document.createElement("div");
  contentPanel.classList.add("demo-dialog__content");
  dialogAnchor.appendChild(dialogPanel);
  dialogPanel.appendChild(title);
  dialogPanel.appendChild(contentPanel);
  return {
    dialogAnchor,
    dialogPanel,
    title,
    contentPanel
  };
}
function inErrorState() {
  const state = window["data-demo-status"];
  return typeof state === "string" && !state.startsWith("OK");
}
function setErrorState(errorOrMessage) {
  window["data-demo-status"] = errorOrMessage != null ? `Error! ${errorOrMessage}` : "Error!";
}
function encode(value) {
  return typeof value === "string" ? value.replace(new RegExp("<", "g"), "[").replace(new RegExp(">", "g"), "]") : value;
}
function addFormRow(form, id, label, type, value, editable) {
  let input;
  if (type === "textarea") {
    const textArea = document.createElement("textarea");
    textArea.rows = 3;
    textArea.value = value;
    input = textArea;
  } else {
    input = document.createElement("input");
    input.setAttribute("type", type);
    input.setAttribute("value", value);
  }
  input.setAttribute("id", `error_dialog_${id}`);
  input.setAttribute("name", `error_dialog_${id}`);
  if (!editable) {
    input.setAttribute("readonly", "true");
  }
  form.appendChild(createLabelElement(id, label));
  form.appendChild(input);
  return input;
}
function createLabelElement(id, label) {
  const labelElement = document.createElement("label");
  labelElement.setAttribute("for", `error_dialog_${id}`);
  labelElement.innerHTML = label;
  return labelElement;
}
function addHiddenField(form, id, value) {
  const input = document.createElement("input");
  input.setAttribute("type", "hidden");
  input.setAttribute("value", value);
  input.setAttribute("id", `error_dialog_${id}`);
  input.setAttribute("name", `error_dialog_${id}`);
  form.appendChild(input);
  return input;
}
function tryAddHiddenField(form, id, value) {
  if (value) {
    addHiddenField(form, id, value);
  }
}
function addErrorMessage(parent, errorOrMessage) {
  const element = document.createElement("div");
  if (typeof errorOrMessage === "string") {
    element.innerHTML = `Error message: ${errorOrMessage}`;
  } else {
    const innerMessage = getInnermostMessage(errorOrMessage);
    if (innerMessage) {
      element.innerHTML = `
        <pre>${innerMessage}</pre>
        <p style='text-align: right; font-size: 0.85em; margin: 4px 0 0 0'>(see console for details)</p>`;
    }
  }
  parent.appendChild(element);
}

// node_modules/demo-resources/demo-ui/demo-ui-init.js
if (document.readyState !== "loading") {
  initializeDemoUI();
} else {
  addEventListener("DOMContentLoaded", initializeDemoUI);
}
function initializeDemoUI() {
  registerErrorDialog();
  enableWorkarounds();
}
function enableWorkarounds() {
  if (BrowserDetection.iOSVersion >= 13 && BrowserDetection.iOSVersion < 15) {
    Workarounds.wk203237 = 100;
  }
}

// node_modules/demo-resources/demo-ui/element-utils.js
function addOptions(selectElement, ...values) {
  for (const value of values) {
    const option = document.createElement("option");
    if (typeof value === "string") {
      option.value = value;
      option.text = value;
    } else {
      option.value = value.value;
      option.text = value.text;
    }
    selectElement.add(option);
  }
  selectElement.dispatchEvent(new Event("change"));
}
function addNavigationButtons(selectElement, wrapAround = true, wrapInDiv = true, ...classes) {
  if (selectElement.parentElement == null) {
    throw new Error("The element must have a parent");
  }
  const prevButton = document.createElement("button");
  prevButton.classList.add("demo-icon-yIconPrevious", "navigation-button", ...classes);
  prevButton.setAttribute("title", "Previous");
  prevButton.addEventListener("click", (_) => {
    const oldIndex = selectElement.selectedIndex;
    const newIndex = lastIndexOfEnabled(selectElement, oldIndex - 1, wrapAround);
    if (oldIndex != newIndex && newIndex > -1) {
      selectElement.selectedIndex = newIndex;
      selectElement.dispatchEvent(new Event("change"));
    }
  });
  const nextButton = document.createElement("button");
  nextButton.classList.add("demo-icon-yIconNext", "navigation-button", ...classes);
  nextButton.setAttribute("title", "Next");
  nextButton.addEventListener("click", (_) => {
    const oldIndex = selectElement.selectedIndex;
    const newIndex = indexOfEnabled(selectElement, oldIndex + 1, wrapAround);
    if (oldIndex != newIndex && newIndex > -1) {
      selectElement.selectedIndex = newIndex;
      selectElement.dispatchEvent(new Event("change"));
    }
  });
  if (wrapInDiv) {
    const wrapper = document.createElement("div");
    wrapper.className = "navigate-select";
    selectElement.parentElement.insertBefore(wrapper, selectElement);
    wrapper.append(prevButton, selectElement, nextButton);
  } else {
    selectElement.parentElement.insertBefore(prevButton, selectElement);
    if (selectElement.nextElementSibling != null) {
      selectElement.parentElement.insertBefore(nextButton, selectElement.nextElementSibling);
    } else {
      selectElement.parentElement.appendChild(nextButton);
    }
  }
  const updateDisabled = () => {
    const lastIndex = selectElement.options.length - 1;
    prevButton.disabled = selectElement.disabled || !wrapAround && selectElement.selectedIndex === 0;
    nextButton.disabled = selectElement.disabled || !wrapAround && selectElement.selectedIndex === lastIndex;
  };
  selectElement.addEventListener("change", (_) => {
    updateDisabled();
  });
  const disabledObserver = new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.attributeName === "disabled") {
        updateDisabled();
        return;
      }
    }
  });
  disabledObserver.observe(selectElement, { attributes: true });
  return selectElement;
}
function indexOfEnabled(selectElement, fromIndex, wrapAround) {
  const n = selectElement.options.length;
  for (let idx = fromIndex; idx < n; ++idx) {
    if (!selectElement.options[idx].disabled) {
      return idx;
    }
  }
  if (wrapAround) {
    for (let idx = 0; idx < fromIndex; ++idx) {
      if (!selectElement.options[idx].disabled) {
        return idx;
      }
    }
  }
  return -1;
}
function lastIndexOfEnabled(selectElement, fromIndex, wrapAround) {
  for (let idx = fromIndex; idx > -1; --idx) {
    if (!selectElement.options[idx].disabled) {
      return idx;
    }
  }
  if (wrapAround) {
    for (let idx = selectElement.options.length - 1; idx > fromIndex; --idx) {
      if (!selectElement.options[idx].disabled) {
        return idx;
      }
    }
  }
  return -1;
}
function checkWebGL2Support() {
  if (!BrowserDetection.webGL2) {
    const message = "Your browser or device does not support WebGL2.<br />\nThis demo only works if WebGL2 is available.<br />\nPlease use a modern browser like Chrome, Edge, Firefox, or Opera.<br />\nIn older versions of Safari and older Apple devices, WebGL2 is an experimental feature\nthat needs to be activated explicitly.";
    createWebGLSupportWarningMessage(message);
    return false;
  }
  return true;
}
function checkWebGLSupport() {
  if (!BrowserDetection.webGL) {
    const message = "Your browser or device does not support WebGL.<br /> \nThis demo only works if WebGL is available.";
    createWebGLSupportWarningMessage(message);
    return false;
  }
  return true;
}
function createWebGLSupportWarningMessage(innerHTML) {
  const graphComponentDiv = document.querySelector("#graphComponent");
  if (graphComponentDiv && graphComponentDiv.parentElement) {
    const parent = graphComponentDiv.parentElement;
    const webglDiv = document.createElement("div");
    webglDiv.setAttribute("style", "display:block");
    webglDiv.id = "no-webgl-support";
    webglDiv.innerHTML = innerHTML;
    parent.appendChild(webglDiv);
  }
}
function bindYFilesCommand(selector, command, target, parameter, tooltip) {
  const element = document.querySelector(selector);
  if (!element || element.getAttribute("data-command-registered")) {
    return;
  }
  element.addEventListener("click", () => {
    if (command.canExecute(parameter, target)) {
      command.execute(parameter, target);
    }
  });
  command.addCanExecuteChangedListener((command2, evt) => {
    if (command2.canExecute(parameter, target)) {
      element.removeAttribute("disabled");
    } else {
      element.setAttribute("disabled", "disabled");
    }
  });
  element.setAttribute("data-command-registered", "");
  element.setAttribute("title", tooltip);
}
function disableUIElements(...elementSelectors) {
  for (const selector of elementSelectors) {
    document.querySelectorAll(selector).forEach((element) => {
      if (!element || element.hasAttribute("disabled"))
        return;
      element.setAttribute("disabled", "");
      element.dataset.disabled = "";
    });
  }
}
function enableUIElements() {
  document.querySelectorAll("[data-disabled]").forEach((e) => {
    e.removeAttribute("disabled");
  });
}
async function showLoadingIndicator(visible, message) {
  const loadingIndicator = document.querySelector("#loading-indicator");
  loadingIndicator.style.display = visible ? "block" : "none";
  if (message) {
    loadingIndicator.innerText = message;
  }
  return new Promise((resolve) => setTimeout(resolve, 0));
}

// node_modules/demo-resources/demo-ui/toolbar.js
function initToolbars() {
  const observer = new ResizeObserver(toolbarSizeChanged);
  for (const toolbar of document.querySelectorAll(".demo-page__toolbar")) {
    if (!toolbar.classList.contains("no-overflow")) {
      initToolbarResponsiveness(toolbar);
      observer.observe(toolbar);
    }
    if (document.body.classList.contains("demo-tutorial")) {
      initTutorialToolbar(toolbar);
    }
  }
}
function forceToolbarOverflowUpdate() {
  for (const toolbar of document.querySelectorAll(".demo-page__toolbar")) {
    if (!toolbar.classList.contains("no-overflow")) {
      const padding = parseFloat(getComputedStyle(toolbar).paddingRight);
      wrapToolbar(toolbar, toolbar.getBoundingClientRect().width, padding);
    }
  }
}
function getToolbarWidthAndPadding(entry) {
  let toolbarWidth = 0, toolbarContentWidth = 0;
  if (!entry.borderBoxSize || !entry.contentBoxSize) {
    toolbarWidth = entry.contentRect.width ? entry.contentRect.width + 32 : 0;
    toolbarContentWidth = entry.contentRect.width ?? 0;
  } else if (!entry.borderBoxSize[0]) {
    toolbarWidth = entry.borderBoxSize.inlineSize ?? 0;
    toolbarContentWidth = entry.contentBoxSize.inlineSize ?? 0;
  } else {
    toolbarWidth = entry.borderBoxSize[0].inlineSize;
    toolbarContentWidth = entry.contentBoxSize[0].inlineSize;
  }
  return { toolbarWidth, toolbarPadding: (toolbarWidth - toolbarContentWidth) / 2 };
}
function toolbarSizeChanged(entries, observer) {
  window.requestAnimationFrame(() => {
    entries.forEach((entry) => {
      const { toolbarWidth, toolbarPadding } = getToolbarWidthAndPadding(entry);
      if (toolbarWidth > 0) {
        wrapToolbar(entry.target, toolbarWidth, toolbarPadding);
      }
    });
  });
}
function initToolbarResponsiveness(toolbar) {
  const overflowContainer = document.createElement("div");
  overflowContainer.setAttribute("title", "");
  overflowContainer.classList.add("overflow-container");
  const overflowContainerContent = document.createElement("div");
  overflowContainerContent.classList.add("overflow-container__content");
  overflowContainer.appendChild(overflowContainerContent);
  const overflowButton = document.createElement("span");
  overflowButton.classList.add("overflow-button");
  overflowButton.setAttribute("title", "More...");
  const closeContainerHandler = (e) => {
    let current = e.target;
    while (current !== overflowContainer && current.parentNode) {
      current = current.parentNode;
    }
    if (current !== overflowContainer && e.target !== overflowButton) {
      overflowContainer.classList.remove("overflow-container--open");
      document.removeEventListener("click", closeContainerHandler);
      e.preventDefault();
    }
  };
  overflowButton.addEventListener("click", (e) => {
    if (e.target !== overflowButton)
      return;
    overflowContainer.classList.toggle("overflow-container--open");
    if (overflowContainer.classList.contains("overflow-container--open")) {
      document.addEventListener("click", closeContainerHandler);
      if (e.currentTarget) {
        overflowContainer.style.right = overflowButton.style.right;
      }
    }
  });
  overflowButton.appendChild(overflowContainer);
  toolbar.insertBefore(overflowButton, toolbar.firstChild);
}
function wrapToolbar(toolbar, toolbarWidth, toolbarPadding) {
  const overflowContainer = toolbar.querySelector(".overflow-container");
  if (!overflowContainer)
    return;
  const overflowContainerContent = overflowContainer.querySelector(".overflow-container__content");
  const overflowButton = toolbar.querySelector(".overflow-button");
  toolbarWidth -= toolbarPadding + 40;
  pushBackOverflow(toolbar, overflowContainerContent, toolbarWidth);
  removeOverflow(toolbar, overflowContainerContent, toolbarWidth);
  if (overflowContainerContent.children.length === 0) {
    overflowButton.classList.add("hidden");
    overflowContainer.classList.remove("overflow-container--open");
  } else {
    overflowButton.classList.remove("hidden");
  }
}
function removeOverflow(toolbar, overflowContainerContent, toolbarWidth) {
  let toolbarItem = toolbar.lastElementChild;
  while (toolbarItem && toolbar.children.length > 3 && (toolbarItem.clientWidth === 0 || // Move hidden elements since their offsetLeft is 0 and will stop the overflow
  toolbarItem.offsetLeft + toolbarItem.clientWidth >= toolbarWidth)) {
    toolbarItem.previousOffsetWidth = toolbarItem.offsetWidth;
    overflowContainerContent.insertBefore(toolbarItem, overflowContainerContent.firstChild);
    if (toolbarItem.hasAttribute("for")) {
      const element = document.getElementById(toolbarItem.getAttribute("for"));
      if (element && element.classList.contains("demo-toggle-button") && element.classList.contains("labeled")) {
        element.previousOffsetWidth = element.offsetWidth;
        overflowContainerContent.insertBefore(element, overflowContainerContent.firstChild);
      }
    }
    toolbarItem = toolbar.lastElementChild;
  }
}
function pushBackOverflow(toolbar, overflowContainerContent, toolbarWidth) {
  let toolbarItem = toolbar.lastElementChild;
  let overflowItem = overflowContainerContent.firstElementChild;
  while (overflowItem && overflowItem.nextElementSibling && (overflowItem.clientWidth === 0 || overflowItem.classList.contains("demo-separator"))) {
    overflowItem = overflowItem.nextElementSibling;
  }
  let space = toolbarWidth - toolbarItem.offsetLeft - toolbarItem.offsetWidth - 5;
  while (overflowItem && overflowItem.previousOffsetWidth < space) {
    while (overflowItem.previousElementSibling) {
      toolbar.appendChild(overflowContainerContent.firstElementChild);
    }
    toolbar.appendChild(overflowItem);
    toolbarItem = toolbar.lastElementChild;
    space = toolbarWidth - toolbarItem.offsetLeft - toolbarItem.offsetWidth - 5;
    overflowItem = overflowContainerContent.firstElementChild;
    while (overflowItem && (overflowItem.clientWidth === 0 || overflowItem.classList.contains("demo-separator"))) {
      overflowItem = overflowItem.nextElementSibling;
    }
  }
}
function initTutorialToolbar(toolbar) {
  const dropdown = toolbar.querySelector(".demo-toolbar__tutorial-dropdown");
  const closeDropdown = (e) => {
    dropdown.classList.remove("demo-toolbar__tutorial-dropdown--expanded");
    document.body.removeEventListener("click", closeDropdown);
  };
  dropdown == null ? void 0 : dropdown.addEventListener("click", (e) => {
    if (dropdown.classList.contains("demo-toolbar__tutorial-dropdown--expanded")) {
      closeDropdown(e);
    } else {
      e.stopPropagation();
      dropdown.classList.add("demo-toolbar__tutorial-dropdown--expanded");
      document.body.addEventListener("click", closeDropdown);
    }
  });
}

// node_modules/demo-resources/demo-ui/finish-loading.js
function finishLoading() {
  const graphComponent = CanvasComponent.getComponent(document.querySelector("#graphComponent"));
  if (graphComponent instanceof GraphComponent) {
    registerDefaultCommands(graphComponent);
    registerDevicePixelRatioChangeListener(graphComponent);
  }
  const overviewComponent = CanvasComponent.getComponent(
    document.querySelector("#overviewComponent")
  );
  if (overviewComponent instanceof GraphOverviewComponent) {
    registerDevicePixelRatioChangeListener(overviewComponent);
  }
  document.body.classList.add("loaded");
  window["data-demo-status"] = "OK";
  initToolbars();
}
function registerDevicePixelRatioChangeListener(canvasComponent) {
  let removeCallback = () => {
  };
  const updatePixelRatio = () => {
    removeCallback();
    const mqString = `(resolution: ${window.devicePixelRatio}dppx)`;
    const media = matchMedia(mqString);
    media.addEventListener("change", updatePixelRatio);
    removeCallback = () => {
      media.removeEventListener("change", updatePixelRatio);
    };
    canvasComponent.devicePixelRatio = window.devicePixelRatio || 1;
  };
  updatePixelRatio();
}
function registerDefaultCommands(graphComponent) {
  var _a;
  (_a = document.querySelector("button[data-command='NEW']")) == null ? void 0 : _a.addEventListener("click", () => {
    var _a2;
    graphComponent.graph.clear();
    (_a2 = graphComponent.graph.undoEngine) == null ? void 0 : _a2.clear();
    graphComponent.fitGraphBounds();
  });
  bindYFilesCommand(
    "[data-command='OPEN']",
    ICommand.OPEN,
    graphComponent,
    null,
    "Open a GraphML file"
  );
  bindYFilesCommand(
    "[data-command='SAVE']",
    ICommand.SAVE,
    graphComponent,
    null,
    "Save a GraphML file"
  );
  bindYFilesCommand(
    "[data-command='FIT_GRAPH_BOUNDS']",
    ICommand.FIT_GRAPH_BOUNDS,
    graphComponent,
    null,
    "Fit content"
  );
  bindYFilesCommand(
    "[data-command='INCREASE_ZOOM']",
    ICommand.INCREASE_ZOOM,
    graphComponent,
    null,
    "Increase zoom"
  );
  bindYFilesCommand(
    "[data-command='DECREASE_ZOOM']",
    ICommand.DECREASE_ZOOM,
    graphComponent,
    null,
    "Decrease zoom"
  );
  bindYFilesCommand(
    "[data-command='ZOOM_ORIGINAL']",
    ICommand.ZOOM,
    graphComponent,
    1,
    "Zoom to original size"
  );
  bindYFilesCommand("[data-command='CUT']", ICommand.CUT, graphComponent, null, "Cut");
  bindYFilesCommand("[data-command='COPY']", ICommand.COPY, graphComponent, null, "Copy");
  bindYFilesCommand("[data-command='PASTE']", ICommand.PASTE, graphComponent, null, "Paste");
  bindYFilesCommand("[data-command='DELETE']", ICommand.DELETE, graphComponent, null, "Delete");
  bindYFilesCommand("[data-command='UNDO']", ICommand.UNDO, graphComponent, null, "Undo");
  bindYFilesCommand("[data-command='REDO']", ICommand.REDO, graphComponent, null, "Redo");
  bindYFilesCommand(
    "[data-command='GROUP_SELECTION']",
    ICommand.GROUP_SELECTION,
    graphComponent,
    null,
    "Group selected element"
  );
  bindYFilesCommand(
    "[data-command='UNGROUP_SELECTION']",
    ICommand.UNGROUP_SELECTION,
    graphComponent,
    null,
    "Ungroup selected element"
  );
  bindYFilesCommand(
    "[data-command='ENTER_GROUP']",
    ICommand.ENTER_GROUP,
    graphComponent,
    null,
    "Enter group"
  );
  bindYFilesCommand(
    "[data-command='EXIT_GROUP']",
    ICommand.EXIT_GROUP,
    graphComponent,
    null,
    "Exit group"
  );
}
export {
  addNavigationButtons,
  addOptions,
  bindYFilesCommand,
  checkWebGL2Support,
  checkWebGLSupport,
  disableUIElements,
  enableUIElements,
  finishLoading,
  forceToolbarOverflowUpdate,
  initToolbars,
  showLoadingIndicator
};
/*! Bundled license information:

demo-resources/demo-ui/BrowserDetection.js:
  (****************************************************************************
   ** @license
   ** This demo file is part of yFiles for HTML 2.6.0.4.
   ** Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,
   ** 72070 Tuebingen, Germany. All rights reserved.
   **
   ** yFiles demo files exhibit yFiles for HTML functionalities. Any redistribution
   ** of demo files in source code or binary form, with or without
   ** modification, is not permitted.
   **
   ** Owners of a valid software license for a yFiles for HTML version that this
   ** demo is shipped with are allowed to use the demo source code as basis
   ** for their own yFiles for HTML powered applications. Use of such programs is
   ** governed by the rights and conditions as set out in the yFiles for HTML
   ** license agreement.
   **
   ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
   ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
   ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   **
   ***************************************************************************)

demo-resources/demo-error.js:
  (****************************************************************************
   ** @license
   ** This demo file is part of yFiles for HTML 2.6.0.4.
   ** Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,
   ** 72070 Tuebingen, Germany. All rights reserved.
   **
   ** yFiles demo files exhibit yFiles for HTML functionalities. Any redistribution
   ** of demo files in source code or binary form, with or without
   ** modification, is not permitted.
   **
   ** Owners of a valid software license for a yFiles for HTML version that this
   ** demo is shipped with are allowed to use the demo source code as basis
   ** for their own yFiles for HTML powered applications. Use of such programs is
   ** governed by the rights and conditions as set out in the yFiles for HTML
   ** license agreement.
   **
   ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
   ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
   ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   **
   ***************************************************************************)

demo-resources/demo-ui/demo-ui-init.js:
  (****************************************************************************
   ** @license
   ** This demo file is part of yFiles for HTML 2.6.0.4.
   ** Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,
   ** 72070 Tuebingen, Germany. All rights reserved.
   **
   ** yFiles demo files exhibit yFiles for HTML functionalities. Any redistribution
   ** of demo files in source code or binary form, with or without
   ** modification, is not permitted.
   **
   ** Owners of a valid software license for a yFiles for HTML version that this
   ** demo is shipped with are allowed to use the demo source code as basis
   ** for their own yFiles for HTML powered applications. Use of such programs is
   ** governed by the rights and conditions as set out in the yFiles for HTML
   ** license agreement.
   **
   ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
   ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
   ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   **
   ***************************************************************************)

demo-resources/demo-ui/element-utils.js:
  (****************************************************************************
   ** @license
   ** This demo file is part of yFiles for HTML 2.6.0.4.
   ** Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,
   ** 72070 Tuebingen, Germany. All rights reserved.
   **
   ** yFiles demo files exhibit yFiles for HTML functionalities. Any redistribution
   ** of demo files in source code or binary form, with or without
   ** modification, is not permitted.
   **
   ** Owners of a valid software license for a yFiles for HTML version that this
   ** demo is shipped with are allowed to use the demo source code as basis
   ** for their own yFiles for HTML powered applications. Use of such programs is
   ** governed by the rights and conditions as set out in the yFiles for HTML
   ** license agreement.
   **
   ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
   ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
   ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   **
   ***************************************************************************)

demo-resources/demo-ui/toolbar.js:
  (****************************************************************************
   ** @license
   ** This demo file is part of yFiles for HTML 2.6.0.4.
   ** Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,
   ** 72070 Tuebingen, Germany. All rights reserved.
   **
   ** yFiles demo files exhibit yFiles for HTML functionalities. Any redistribution
   ** of demo files in source code or binary form, with or without
   ** modification, is not permitted.
   **
   ** Owners of a valid software license for a yFiles for HTML version that this
   ** demo is shipped with are allowed to use the demo source code as basis
   ** for their own yFiles for HTML powered applications. Use of such programs is
   ** governed by the rights and conditions as set out in the yFiles for HTML
   ** license agreement.
   **
   ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
   ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
   ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   **
   ***************************************************************************)

demo-resources/demo-ui/finish-loading.js:
  (****************************************************************************
   ** @license
   ** This demo file is part of yFiles for HTML 2.6.0.4.
   ** Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,
   ** 72070 Tuebingen, Germany. All rights reserved.
   **
   ** yFiles demo files exhibit yFiles for HTML functionalities. Any redistribution
   ** of demo files in source code or binary form, with or without
   ** modification, is not permitted.
   **
   ** Owners of a valid software license for a yFiles for HTML version that this
   ** demo is shipped with are allowed to use the demo source code as basis
   ** for their own yFiles for HTML powered applications. Use of such programs is
   ** governed by the rights and conditions as set out in the yFiles for HTML
   ** license agreement.
   **
   ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
   ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
   ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   **
   ***************************************************************************)

demo-resources/demo-page.js:
  (****************************************************************************
   ** @license
   ** This demo file is part of yFiles for HTML 2.6.0.4.
   ** Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,
   ** 72070 Tuebingen, Germany. All rights reserved.
   **
   ** yFiles demo files exhibit yFiles for HTML functionalities. Any redistribution
   ** of demo files in source code or binary form, with or without
   ** modification, is not permitted.
   **
   ** Owners of a valid software license for a yFiles for HTML version that this
   ** demo is shipped with are allowed to use the demo source code as basis
   ** for their own yFiles for HTML powered applications. Use of such programs is
   ** governed by the rights and conditions as set out in the yFiles for HTML
   ** license agreement.
   **
   ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
   ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
   ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   **
   ***************************************************************************)
*/
//# sourceMappingURL=demo-resources_demo-page.js.map
