export interface OptimizerOptions {
  blacklist?: string[]
  logLevel?: 'error' | 'warn' | 'info' | 'verbose' | 'debug' | 'silly'
  safeMode?: boolean
  obfuscateBabelSafePublicFields?: boolean
}

interface DefaultOptions extends OptimizerOptions {
  blacklist: []
  logLevel: 'warn'
  safeMode: false
  obfuscateBabelSafePublicFields: true
}

export const defaultOptions: DefaultOptions

type OptimizerInput<T> = T & {
  source: string
}

type OptimizerOutput<T> = OptimizerInput<T> & {
  result: string
}

export function optimize<T>(
  libModules: OptimizerInput<T>[],
  sourceFiles: OptimizerInput<T>[],
  options?: OptimizerOptions
): {
  libModules: OptimizerOutput<T>[]
  sourceFiles: OptimizerOutput<T>[]
  nameMap: Map<string, string>
}
