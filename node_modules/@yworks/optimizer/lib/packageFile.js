const t = require('@babel/types')
const parseWithScope = require('./parseWithScope')
const ObfuscationScopeInfo = require('./ObfuscationScopeInfo')
const logger = require('./logger')

/**
 * @param {object} userFile
 * @param {Mapper} mapper
 */
module.exports = function packageFile(userFile, mapper, obfuscateBabelSafePublicFields) {
  const ast = userFile.ast

  parseWithScope(
    ast,
    new ObfuscationScopeInfo(ObfuscationScopeInfo.MODE_OBFUSCATE),
    obfuscateVisitor
  )

  function obfuscateVisitor(node, parent) {
    const obfuscationInfo = node.obfuscationInfo
    if (
      !obfuscationInfo ||
      obfuscationInfo.obfuscationMode !== ObfuscationScopeInfo.MODE_OBFUSCATE
    ) {
      return
    }

    if (t.isStringLiteral(node) && t.isProperty(parent) && parent.key === node) {
      if (!isBlacklisted(node, obfuscationInfo) && mapper.shouldObfuscate(node.value)) {
        node.value = mapper.getObfuscatedName(node.value)
      }
    }

    //
    // Syntax.TEXT = 'text'
    // ->
    // _defineProperty(Syntax, 'TEXT', 'text')
    else if (
      obfuscateBabelSafePublicFields &&
      t.isStringLiteral(node) &&
      t.isCallExpression(parent) &&
      parent.arguments.length === 3 &&
      parent.arguments[1] === node &&
      (t.isIdentifier(parent.arguments[0]) || t.isThisExpression(parent.arguments[0])) &&
      t.isIdentifier(parent.callee)
    ) {
      if (!isBlacklisted(node, obfuscationInfo) && mapper.shouldObfuscate(node.value)) {
        logger.debug(`Renaming possible babel defineProperty call: ${node.value}`)
        node.value = mapper.getObfuscatedName(node.value)
      }
    }

    // es5-ified typescript getter
    // get renderer(): typeof INodeStyleRenderer {
    //     return 'foo'
    //   }
    // ->
    // Object.defineProperty(MyNodeStyle.prototype, 'renderer', {
    //       get: function () {
    //         return 'foo'
    //       },
    //       enumerable: false,
    //       configurable: true
    //     })
    else if (
      t.isStringLiteral(node) &&
      t.isCallExpression(parent) &&
      parent.arguments[1] === node
    ) {
      const isDefinePropertyCall =
        t.isMemberExpression(parent.callee) &&
        t.isIdentifier(parent.callee.object) &&
        t.isIdentifier(parent.callee.property) &&
        parent.callee.object.name === 'Object' &&
        parent.callee.property.name === 'defineProperty'
      if (
        isDefinePropertyCall &&
        !isBlacklisted(node, obfuscationInfo) &&
        mapper.shouldObfuscate(node.value)
      ) {
        node.value = mapper.getObfuscatedName(node.value)
      }
    }

    // es5-ified babel _createClass
    //  _createClass(AdditionalSnapLineMoveInputMode, [{
    //    key: 'initialize',
    //
    // {
    //     "type": "Property",
    //     "key": {
    //         "type": "Identifier",
    //         "name": "key"
    //     },
    //     "computed": false,
    //     "value": {
    //         "type": "Literal",
    //         "value": "initialize",
    //         "raw": "'initialize'"
    //     },
    //     "kind": "init",
    //     "method": false,
    //     "shorthand": false
    // }
    else if (
      t.isStringLiteral(node) &&
      t.isProperty(parent) &&
      parent.value === node &&
      t.isIdentifier(parent.key) &&
      parent.key.name === 'key'
    ) {
      if (!isBlacklisted(node, obfuscationInfo) && mapper.shouldObfuscate(node.value)) {
        node.value = mapper.getObfuscatedName(node.value)
        node.raw = "'" + mapper.getObfuscatedName(node.value) + "'"
      }
    }

    // es5-ified babel super call
    else if (
      t.isCallExpression(node) &&
      t.isIdentifier(node.callee) &&
      (node.callee.name === '_get' || node.callee.name === '_set') &&
      node.arguments.length === 3 &&
      t.isStringLiteral(node.arguments[1]) &&
      (t.isThisExpression(node.arguments[2]) || t.isIdentifier(node.arguments[2]))
    ) {
      if (
        !isBlacklisted(node, obfuscationInfo) &&
        mapper.shouldObfuscate(node.arguments[1].value)
      ) {
        node.arguments[1].value = mapper.getObfuscatedName(node.arguments[1].value)
        node.arguments[1].raw = "'" + mapper.getObfuscatedName(node.arguments[1].value) + "'"
      }
    } else if (
      t.isIdentifier(node) &&
      !isBlacklisted(node, obfuscationInfo) &&
      mapper.shouldObfuscate(node.name)
    ) {
      node.name = mapper.getObfuscatedName(node.name)
    }
  }

  function isBlacklisted(node, obfuscationInfo) {
    obfuscationInfo = obfuscationInfo || node.obfuscationInfo
    if (!node || !obfuscationInfo) {
      return true
    }

    if (t.isThisExpression(node)) {
      return obfuscationInfo.isBlacklisted('this')
    } else if (t.isIdentifier(node)) {
      return obfuscationInfo.isBlacklisted(node.name)
    } else if (t.isStringLiteral(node)) {
      return obfuscationInfo.isBlacklisted(node.value)
    } else if (t.isMemberExpression(node)) {
      return isBlacklisted(node.object, obfuscationInfo)
    } else if (t.isCallExpression(node)) {
      return isBlacklisted(node.callee, obfuscationInfo)
    } else if (t.isConditionalExpression(node)) {
      return (
        isBlacklisted(node.consequent, obfuscationInfo) ||
        isBlacklisted(node.alternate, obfuscationInfo)
      )
    } else if (t.isBinaryExpression(node) || t.isLogicalExpression(node)) {
      return isBlacklisted(node.left, obfuscationInfo) || isBlacklisted(node.right, obfuscationInfo)
    }

    return false
  }
}
