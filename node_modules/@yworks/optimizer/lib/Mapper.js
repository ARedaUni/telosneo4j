const hardBlacklist = new Set(
  require('./excludes/canvas2D.json')
    .concat(require('./excludes/yfiles.json'))
    .concat(require('./excludes/js.json'))
    .concat(require('./excludes/lang.json'))
)

const firstChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let generatedNamesCounter = 0

function generateShortName(prefix, index) {
  if (index < firstChars.length) {
    if (!prefix || !prefix.length) {
      return firstChars.charAt(index)
    } else {
      return prefix + firstChars.charAt(index)
    }
  } else {
    let result = prefix || ''
    let remainder = index
    while (remainder > 0) {
      result += firstChars.charAt(remainder % firstChars.length)
      remainder = (remainder / firstChars.length) | 0
    }
    return result
  }
}

function generateObfuscatedName() {
  return generateShortName('__', generatedNamesCounter++)
}

/**
 * The main mapping logic. Stores lists, mappings, and generates new names...
 *
 * @param {Map<string,string>} suggestedMapping Suggests a short name for a given public name.
 * @param {Set} blacklist A set of blacklisted names.
 * @param {Set} obfuscationNames A set of names that we *could* obfuscate.
 * @param {Set} usedNames
 * @constructor
 */
module.exports = class Mapper {
  constructor(
    suggestedMapping = new Map(),
    blacklist = new Set(),
    obfuscationNames,
    usedNames = new Set(),
    es6NameMap,
    safeMode
  ) {
    /** @type Map<string,string> */
    this.suggestedMapping = suggestedMapping
    this.blacklist = blacklist
    this.obfuscationNames = obfuscationNames
    this.usedNames = usedNames
    // the resulting mapping
    /** @type Map<string,string> */
    this.mapping = new Map()
    this.es6NameMap = es6NameMap
    this.safeMode = safeMode
  }

  /**
   * Returns the mapped name for the given original name.
   * @param {string} name
   * @returns {string}
   */
  getObfuscatedName(name) {
    if (this.isBlacklisted(name)) {
      // keep it
      return name
    } else {
      let mapped = this.mapping.get(name)
      if (!mapped) {
        // not yet mapped
        const newName = this.suggestedMapping.get(name)
        if (newName) {
          mapped = newName
        }
        if (!mapped) {
          mapped = generateObfuscatedName()
        }
      }
      this.mapping.set(name, mapped)
      return mapped
    }
  }

  isUsed(name) {
    return (
      this.usedNames.has(name) ||
      (this.es6NameMap.has(name) &&
        this.es6NameMap.get(name).some(es6Name => this.usedNames.has(es6Name)))
    )
  }

  shouldObfuscate(name) {
    return (
      name.length > 2 &&
      this.obfuscationNames.has(name) &&
      !this.isBlacklisted(name) &&
      (!this.safeMode || !this.isUsed(name))
    )
  }

  isBlacklisted(name) {
    return hardBlacklist.has(name) || this.blacklist.has(name)
  }
}
