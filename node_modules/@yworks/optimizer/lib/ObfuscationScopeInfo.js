class ObfuscationScopeInfo {
  /**
   * @param {number} obfuscationMode - Whether this section may be obfuscated
   * @param {number[]} [range] - The range this info applies to
   */
  constructor(obfuscationMode, range) {
    this.obfuscationMode = obfuscationMode
    this.blacklist = new Set()
    this.globalBlackList = new Set()
    this.range = range || [0, Number.MAX_VALUE]
    this.parent = null
    this.children = []
  }

  /**
   * Returns whether the given range is contained in the range of this scope.
   * @returns {boolean}
   */
  isInRange(range) {
    return this.range[0] <= range[0] && this.range[1] >= range[1]
  }

  /**
   * Adds an element to the local blacklist
   * @param {string} item The item to add to the black list
   */
  addBlackListItem(item) {
    return this.blacklist.add(item)
  }

  /**
   * Adds an element to the local blacklist
   * @param {string} item The item to add to the black list
   */
  addGlobalBlackListItem(item) {
    return this.parent !== null
      ? this.parent.addGlobalBlackListItem(item)
      : this.globalBlackList.add(item)
  }

  /**
   * Main method that recursively checks the blacklist status up to the root of the obfuscation scope.
   * @param {string} name
   * @returns {boolean}
   */
  isBlacklisted(name) {
    return (
      this.obfuscationMode === ObfuscationScopeInfo.MODE_BLACKLIST || this.isBlacklistedCore(name)
    )
  }

  /**
   * @param {string} name
   * @returns {boolean}
   */
  isBlacklistedCore(name) {
    return this.blacklist.has(name) || (this.parent !== null && this.parent.isBlacklistedCore(name))
  }

  /**
   * Creates a new child scope of this scope.
   * @param {number} obfuscationMode The mode constant
   * @param {number[]} range
   * @returns {ObfuscationScopeInfo}
   */
  addChildInfo(obfuscationMode, range) {
    const child = new ObfuscationScopeInfo(obfuscationMode, range)
    child.parent = this
    this.children.push(child)
    return child
  }
}

ObfuscationScopeInfo.MODE_OBFUSCATE = 1 // rename everything
ObfuscationScopeInfo.MODE_BLACKLIST = 2 // blacklist everything
ObfuscationScopeInfo.MODE_KEEP = 3 // don't rename, but don't blacklist either

ObfuscationScopeInfo.DEFAULT = new ObfuscationScopeInfo(ObfuscationScopeInfo.MODE_BLACKLIST)

module.exports = ObfuscationScopeInfo
